plugins {
    id "de.undercouch.download" version "3.2.0"
}

apply plugin: 'base'
apply plugin: 'maven-publish'

version = custom_gradle_version
group = target_maven_repo_group

ext {
    gradleVersion = gradle_version
    gradleDownloadBase = gradle_download_base
    gradleClassifier = gradle_classifier
}

import de.undercouch.gradle.tasks.download.Download

task downloadGradle(type: Download) {
	group = 'Custom distribution'
    description = 'Downloads the Gradle distribution. Version needs to be specified in gradle.properties.'

    src gradleDownloadBase + 'gradle-'+gradleVersion+'-'+ gradleClassifier + '.zip'
	dest "$buildDir/gradle-download/gradle-"+gradleVersion+"-" + gradleClassifier + ".zip"
    onlyIfNewer true
}

task customGradleDistribution(type: Zip, dependsOn: downloadGradle) {
    group = 'Custom distribution'
	description = 'Builds custom Gradle distribution and bundles initialization scripts.'
    archiveName "${target_maven_repo_artifactid_gradle_distribution}-$project.gradleVersion-$version-${project.gradleClassifier}.zip"

    from zipTree(downloadGradle.dest)
    into "gradle-$project.gradleVersion/init.d", {
        from 'src/init.d'
    }

    inputs.file downloadGradle.dest

    doLast {
        logger.info "Custom distribution archive " + archivePath + " created."
    }
}

//task to write gradle-wrapper.properties
//SHA-256 of created distribution file will be computed and written into the file
task wrapperPropertiesForDistribution(type: WriteProperties, dependsOn: customGradleDistribution) {
	group = 'Custom distribution'
	description = 'Creates gradle-wrapper.properties for created distribution.'
    File wrapperproperties = new File("${project.buildDir}\\gradle-wrapper.properties")
	
    inputs.file customGradleDistribution.archivePath
    outputs.file file(wrapperproperties)
    outputs.upToDateWhen {
        false
    }
    setOutputFile(wrapperproperties)
	doLast{
		
		setComment('use local version of gradle\n'+
		'#always when gradle distribution uploaded to artifactory changes SHA-256 hash needs to be recomputed and stored here\n'+
		'#shasum -a 256 gradle-distribution.zip\n'+
		'#for more information see https://docs.gradle.org/current/userguide/gradle_wrapper.html')

		property('distributionBase','GRADLE_USER_HOME')		
		property('distributionPath',"wrapper/dists")
		property('zipStoreBase','GRADLE_USER_HOME')
		property('zipStorePath',"wrapper/dists")
		property('distributionUrl',"${target_maven_repo}/${target_maven_repo_group}/${target_maven_repo_artifactid_gradle_distribution}/$version/${target_maven_repo_artifactid_gradle_distribution}-${version}-bin.zip")
		property('distributionSha256Sum',calcSHA256(customGradleDistribution.archivePath))
		
		writeProperties()
		
		logger.info "gradle-wrapper.properties created in " + wrapperproperties
	}
}

import java.security.MessageDigest
import org.gradle.api.GradleException

//must be the same as shasum -a 256 <distribution_file>
def calcSHA256(file) {
	
	if(file.exists()) {
		logger.info "computing SHA-256 of " + file
		MessageDigest md = MessageDigest.getInstance("SHA-256")
		file.eachByte 4096, {bytes, size ->
     	   md.update(bytes, 0, size);
    	}
    	def sha256 = md.digest().collect {String.format "%02x",it}.join()
    	logger.debug "Computed digest " +sha256 
    	return sha256
	} else {
		logger.error "file " + file + " does not exist"
		throw new GradleException("Computation of SHA-256 not possible. File " + file + " does not exist")
	}
}

publishing {
    publications {
		def artifactName = customGradleDistribution.archivePath
        gradle(MavenPublication) {
        	//publish zip created with companyGradleZip task
        	groupId project.group
        	artifactId target_maven_repo_artifactid_gradle_distribution
        	//specifiy with bin classifier
			artifact source: file("$artifactName"), classifier:"bin", extension:"zip"
        }
        gradlewrapperproperties(MavenPublication) {
        	groupId project.group
        	artifactId "gradle-wrapper.properties"
			artifact source: file("${project.buildDir}/gradle-wrapper.properties")
        }
    }
}

publishing {
    repositories {
        maven {
            // change to point to your repo, e.g. http://my.org/repo
            url target_maven_repo
			credentials {
				username = target_maven_repo_username
				password = target_maven_repo_password
			}
        }
    }
}

defaultTasks 'wrapperPropertiesForDistribution'